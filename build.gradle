configurations {
    jaxb
}

buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

group = 'mil.af.us'
version = '0.0.1-SNAPSHOT'
archivesBaseName = 'narwhal'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/UnicornMissionWebservicesV2.xml"

    outputs.dir classesDir

    doLast {
        project.ant {
            taskdef name: "xjc",
                    classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir,
                    schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    compile(
            'org.flywaydb:flyway-core',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-web-services',
            'org.springframework.boot:spring-boot-starter-security',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310',
            'org.springframework.security.oauth:spring-security-oauth2',
            'org.hibernate:hibernate-java8',
            files(genJaxb.classesDir).builtBy(genJaxb)
    )

    runtime(
            'mysql:mysql-connector-java'
    )

    compileOnly(
            'org.projectlombok:lombok'
    )

    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test'
    )

    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
}


jar {
    from genJaxb.classesDir
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }

    if (project.hasProperty('excludeTests')) {
        exclude project.property('excludeTests')
    }
}